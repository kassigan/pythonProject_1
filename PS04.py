# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å–æ–ª–∏.
# 1. –°–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
# 2. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏.
# 3. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π:
# –ª–∏—Å—Ç–∞—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏;
# –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü ‚Äî –∏ —Å–Ω–æ–≤–∞ –≤—ã–±–æ—Ä –∏–∑ –¥–≤—É—Ö –ø—É–Ω–∫—Ç–æ–≤:
# - –ª–∏—Å—Ç–∞—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å—Ç–∞—Ç—å–∏;
# - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π.
# –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
import time


def open_wikipedia():
    """–°–æ–∑–¥–∞—ë–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä"""
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")  # –æ—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ–ª–Ω–æ–º –æ–∫–Ω–µ
    browser = webdriver.Chrome(ChromeDriverManager().install(), options=options)
    return browser


def search_article(browser, query):
    """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏"""
    browser.get("https://ru.wikipedia.org/wiki/–ó–∞–≥–ª–∞–≤–Ω–∞—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    search_box = browser.find_element(By.ID, "searchInput")
    search_box.send_keys(query)
    search_box.send_keys(Keys.ENTER)
    time.sleep(2)


def read_article(browser):
    """–õ–∏—Å—Ç–∞–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Å—ã–ª–∫–∞–º"""
    while True:
        paragraphs = browser.find_elements(By.CSS_SELECTOR, "p")
        print("\n--- –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å—Ç–∞—Ç—å–∏ ---")
        for i, p in enumerate(paragraphs[:5], start=1):
            print(f"{i}. {p.text[:150]}...")  # –ø–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–∞–±–æ—Ä—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
        print("2 ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
        print("3 ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == "1":
            browser.execute_script("window.scrollBy(0, window.innerHeight);")
            time.sleep(2)

        elif choice == "2":
            links = browser.find_elements(By.CSS_SELECTOR, "#bodyContent a[href^='/wiki/']")
            unique_links = []
            for link in links:
                href = link.get_attribute("href")
                if href not in unique_links and ":" not in href:  # –æ—Ç—Å–µ–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    unique_links.append(href)
            if not unique_links:
                print("–°–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                continue

            print("\n–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
            for i, link in enumerate(unique_links[:10], start=1):
                print(f"{i}. {link}")

            num = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞: ")
            if num.isdigit() and 1 <= int(num) <= len(unique_links[:10]):
                browser.get(unique_links[int(num) - 1])
                time.sleep(2)
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–µ.")

        elif choice == "3":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")


def main():
    browser = open_wikipedia()
    print("üîé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∏–∫–∏–ø–µ–¥–∏—é (—á–µ—Ä–µ–∑ Selenium)!")
    try:
        query = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: ")
        search_article(browser, query)
        read_article(browser)
    finally:
        browser.quit()


if __name__ == "__main__":
    main()
